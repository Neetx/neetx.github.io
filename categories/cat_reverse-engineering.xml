<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Neetx website (Reverse Engineering)</title><link>https://neetx.github.io/</link><description>In this section I will post my experiments in the reverse engineering field.</description><atom:link href="https://neetx.github.io/categories/cat_reverse-engineering.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:neetx@protonmail.com"&gt;Neetx&lt;/a&gt; </copyright><lastBuildDate>Fri, 05 Mar 2021 12:22:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>ELF symbols</title><link>https://neetx.github.io/posts/ELF-symbols/</link><dc:creator>Neetx</dc:creator><description>&lt;div&gt;&lt;p&gt;Function and variable names are called symbols, they must be translated 
into offsets and addresses at compilation time.
The compiler exports &lt;strong&gt;symbolic information&lt;/strong&gt; into the output object, that
holds symbols and interfaces to them (local, external).&lt;/p&gt;
&lt;p&gt;Linkers and debuggers works with symbols accessing the interfaces and the
Symbol Table.
Debugging is possible, but harder, without symbols, as in a stripped elf.
It's possible to remove symbol tables or its entries&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;ELF symbol&lt;/h3&gt;
&lt;p&gt;In an ELF file there is a Symbol Table (max two) as an array of structures
called Elf32_Sym or Elf64_Sym&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="cm"&gt;/* Symbol table entry.  */&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;      &lt;span class="n"&gt;st_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Symbol name (string tbl index) */&lt;/span&gt;
    &lt;span class="n"&gt;Elf32_Addr&lt;/span&gt;      &lt;span class="n"&gt;st_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* Symbol value                   */&lt;/span&gt;
    &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;      &lt;span class="n"&gt;st_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Symbol size                    */&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;   &lt;span class="n"&gt;st_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Symbol type and binding        */&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;   &lt;span class="n"&gt;st_other&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* Symbol visibility              */&lt;/span&gt;
    &lt;span class="n"&gt;Elf32_Section&lt;/span&gt;   &lt;span class="n"&gt;st_shndx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* Section index                  */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf32_Sym&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;     &lt;span class="n"&gt;st_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Symbol name (string tbl index) */&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;  &lt;span class="n"&gt;st_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Symbol type and binding        */&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;  &lt;span class="n"&gt;st_other&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Symbol visibility              */&lt;/span&gt;
    &lt;span class="n"&gt;Elf64_Section&lt;/span&gt;  &lt;span class="n"&gt;st_shndx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Section index                  */&lt;/span&gt;
    &lt;span class="n"&gt;Elf64_Addr&lt;/span&gt;     &lt;span class="n"&gt;st_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Symbol value                   */&lt;/span&gt;
    &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;    &lt;span class="n"&gt;st_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Symbol size                    */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf64_Sym&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4&gt;st_name&lt;/h4&gt;
&lt;p&gt;If &lt;strong&gt;st_name&lt;/strong&gt; isn't unitialized the the symbol hasn't a name.&lt;/p&gt;
&lt;h4&gt;st_info&lt;/h4&gt;
&lt;p&gt;In &lt;strong&gt;st_info&lt;/strong&gt; there are binding attributes (linkage visibility and
behavior when the symbol is externally referenced)
Common binding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STB_LOCAL : invisible from outside&lt;/li&gt;
&lt;li&gt;STB_GLOBAL: visible from outside&lt;/li&gt;
&lt;li&gt;STB_WEAK  : global symbol but it can be redefined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Common types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STT_NOTYPE : type not specified&lt;/li&gt;
&lt;li&gt;STT_OBJECT : symbol is a data object (variable).&lt;/li&gt;
&lt;li&gt;STT_FUNC   : symbol is a code object (function).&lt;/li&gt;
&lt;li&gt;STT_SECTION: symbol is a section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get these fields a set of bitmasks are used&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELF64_ST_BIND(info) ((info) &amp;gt;&amp;gt; 4 )&lt;/li&gt;
&lt;li&gt;ELF64_ST_TYPE(info) ((info) &amp;amp; 0xf)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;st_other&lt;/h4&gt;
&lt;p&gt;Information about symbol visibility, how a symbol can be accessed after it
become part of an object:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STV_DEFAULT  : default visibility, it is equal to symbol’s binding type&lt;/li&gt;
&lt;li&gt;STV_PROTECTED: it is visible by other objects, but cannot be preempted&lt;/li&gt;
&lt;li&gt;STV_HIDDEN   : invisible&lt;/li&gt;
&lt;li&gt;STV_INTERNAL : internal visiblity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Symbol binding&lt;/strong&gt; refers to an external object referencing a symbol at
linking time
&lt;strong&gt;Symbol visibility&lt;/strong&gt; refers on the original object and to an external
object referencing the symbol of interest, at runtime&lt;/p&gt;
&lt;p&gt;Macro to get visibility information: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELF64_ST_VISIBLITY(o) ((o) &amp;amp; 0x3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;st_shndx&lt;/h4&gt;
&lt;p&gt;Every symbol is associated with a section, &lt;strong&gt;st_shndx&lt;/strong&gt; contains its index
in the Section Header Table&lt;/p&gt;
&lt;p&gt;Common section type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHT_UNDEF: section is not present in the object. The symbol is imported&lt;/li&gt;
&lt;li&gt;SHT_PROGBITS: section is defined in current object&lt;/li&gt;
&lt;li&gt;SHT_SYMTAB, SHT_DYNSYM: Symbol Table (.symtab, .dynsym)&lt;/li&gt;
&lt;li&gt;SHT_STRTAB, SHT_DYNSTR:  String Table (.strtab, .dynstr)&lt;/li&gt;
&lt;li&gt;SHT_REL: Relocation Table without explicit addends (.rel.dyn, .rel.plt)&lt;/li&gt;
&lt;li&gt;SHT_RELA: Relocation Table with explicit addends (.rela.dyn, .rela.plt)&lt;/li&gt;
&lt;li&gt;SHT_HASH: Hash Table for dynamic symbol resolution (.gnu.hash)&lt;/li&gt;
&lt;li&gt;SHT_DYNAMIC: section holding Dynamic Linking information (.dynamic)&lt;/li&gt;
&lt;li&gt;SHT_NOBITS: section takes no space in disk (.bss)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;st_value&lt;/h4&gt;
&lt;p&gt;Symbol value for an entry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For ET_REL files this value represents a section offset &lt;/li&gt;
&lt;li&gt;For ET_EXEC or ET_DYN files this value represents a virtual address
  If it is equal to 0 and the section pointed by st_shndx has a sh_type
  equal to SHT_UNDEF, then this symbol is imported (so its value is
  resolved at runtime by RTLD(ld.so))&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;st_size&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;st_size&lt;/strong&gt; contains symbol's size&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;String Table&lt;/h3&gt;
&lt;p&gt;In an ELF are commont two Symbol Tables: .symtab and .dynsym.
The .symtab is the global Symbol Table of the object, it has a Sting Table
called .strtab (they have the same number of entries).&lt;/p&gt;
&lt;p&gt;The .dynsym Symbol Table contains symbols for Dynamic Linking, its strings
are in the .dynstr String Table&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A &lt;strong&gt;stripped&lt;/strong&gt; binary hasn't .symtab and .strtab, so reversing and
debugging is harder, but some symbol can be retrieved by the .dynsym
located at DT_SYMTAB entry in the PT_DYNAMIC segment.&lt;/p&gt;
&lt;p&gt;Dynamically linked binaries can be stripped but .dynsym and .dynstr cannot
be removed&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.intezer.com/blog/elf/executable-linkable-format-101-part-2-symbols/"&gt;intezer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>#elf</category><category>#linux</category><category>#malware</category><category>#reverse</category><category>#security</category><guid>https://neetx.github.io/posts/ELF-symbols/</guid><pubDate>Sun, 17 Jan 2021 20:26:58 GMT</pubDate></item><item><title>ELF headers, sections and segments</title><link>https://neetx.github.io/posts/ELF-headers-sections-and-segments/</link><dc:creator>Neetx</dc:creator><description>&lt;div&gt;&lt;p&gt;ELF is a file format for executables file, Linux uses ELF files.
The name stands for Executable and Linkable Format&lt;/p&gt;
&lt;p&gt;Its components are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELF Header&lt;/li&gt;
&lt;li&gt;Sections&lt;/li&gt;
&lt;li&gt;Segments&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;ELF Header&lt;/h3&gt;
&lt;p&gt;The ELF header is described by the type Elf32_Ehdr or Elf64_Ehdr, it 
information about the binary.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="cm"&gt;/* The ELF file header.  This appears at the start of every ELF file.  */&lt;/span&gt;
&lt;span class="cp"&gt;#define EI_NIDENT (16)&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;  &lt;span class="n"&gt;e_ident&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EI_NIDENT&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="cm"&gt;/* Magic number and other info    */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;             &lt;span class="cm"&gt;/* Object file type                */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_machine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* Architecture                     */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;     &lt;span class="n"&gt;e_version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* Object file version              */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Addr&lt;/span&gt;     &lt;span class="n"&gt;e_entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Entry point virtual address      */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Off&lt;/span&gt;      &lt;span class="n"&gt;e_phoff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Program header table file offset */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Off&lt;/span&gt;      &lt;span class="n"&gt;e_shoff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Section header table file offset */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;     &lt;span class="n"&gt;e_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Processor-specific flags         */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_ehsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* ELF header size in bytes         */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_phentsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Program header table entry size  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_phnum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Program header table entry count */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_shentsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Section header table entry size  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_shnum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* Section header table entry count */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Half&lt;/span&gt;     &lt;span class="n"&gt;e_shstrndx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section header string table index*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf32_Ehdr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;   &lt;span class="n"&gt;e_ident&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EI_NIDENT&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="cm"&gt;/* Magic number and other info   */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;             &lt;span class="cm"&gt;/* Object file type               */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_machine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Architecture                     */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;      &lt;span class="n"&gt;e_version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Object file version              */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Addr&lt;/span&gt;      &lt;span class="n"&gt;e_entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Entry point virtual address      */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Off&lt;/span&gt;       &lt;span class="n"&gt;e_phoff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Program header table file offset */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Off&lt;/span&gt;       &lt;span class="n"&gt;e_shoff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Section header table file offset */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;      &lt;span class="n"&gt;e_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Processor-specific flags         */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_ehsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* ELF header size in bytes         */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_phentsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* Program header table entry size  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_phnum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Program header table entry count */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_shentsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* Section header table entry size  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_shnum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* Section header table entry count */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Half&lt;/span&gt;      &lt;span class="n"&gt;e_shstrndx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Section header string table index*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf64_Ehdr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;e_ident[EI_NIDENT]&lt;/strong&gt; is a 16 bytes array that contains identification flags
about the file, these flags are used to interpret and decode the file
Flags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EI_MAG0-3    : ELF magic number&lt;/li&gt;
&lt;li&gt;EI_CLASS     : File class.&lt;/li&gt;
&lt;li&gt;EI_DATA      : File’s data encoding.&lt;/li&gt;
&lt;li&gt;EI_VERSION   : File’s version.&lt;/li&gt;
&lt;li&gt;EI_OSABI     : OS/ABI identification.&lt;/li&gt;
&lt;li&gt;EI_ABIVERSION: ABI version&lt;/li&gt;
&lt;li&gt;EI_PAD       : Start of padding bytes.&lt;/li&gt;
&lt;li&gt;EI_NIDENT    : Size of ei_ident.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command to get elf header&lt;/p&gt;
&lt;pre class="code literal-block"&gt;readelf -h elf_name
&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;Sections&lt;/h3&gt;
&lt;p&gt;Sections contains all the information for linking (link-time and not at
runtime).
There is a Section Header Table, an array of structures Elf64_Shdr (and
Elf32_Shdr for i386 ABI), there is an array entry for each section.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="cm"&gt;/* Section header.  */&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section name (string tbl index)      */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section type                         */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Section flags                        */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Addr&lt;/span&gt;    &lt;span class="n"&gt;sh_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section virtual addr at execution    */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Off&lt;/span&gt;     &lt;span class="n"&gt;sh_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* Section file offset                  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section size in bytes                */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Link to another section              */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Additional section information       */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_addralign&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* Section alignment                    */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_entsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* Entry size if section holds table    */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf32_Shdr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section name (string tbl index)      */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section type                         */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;   &lt;span class="n"&gt;sh_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Section flags                        */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Addr&lt;/span&gt;    &lt;span class="n"&gt;sh_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section virtual addr at execution    */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Off&lt;/span&gt;     &lt;span class="n"&gt;sh_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* Section file offset                  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;   &lt;span class="n"&gt;sh_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Section size in bytes                */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Link to another section              */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;    &lt;span class="n"&gt;sh_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Additional section information       */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;   &lt;span class="n"&gt;sh_addralign&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* Section alignment                    */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;   &lt;span class="n"&gt;sh_entsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* Entry size if section holds table    */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf64_Shdr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Some sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.text   : code.&lt;/li&gt;
&lt;li&gt;.data   : initialised data.&lt;/li&gt;
&lt;li&gt;.rodata : initialised read-only data.&lt;/li&gt;
&lt;li&gt;.bss    : uninitialized data.&lt;/li&gt;
&lt;li&gt;.plt    : PLT (Procedure Linkage Table) (IAT equivalent).&lt;/li&gt;
&lt;li&gt;.got    : GOT entries dedicated to dynamically linked global variables.&lt;/li&gt;
&lt;li&gt;.got.plt: GOT entries dedicated to dynamically linked functions.&lt;/li&gt;
&lt;li&gt;.symtab : global symbol table.&lt;/li&gt;
&lt;li&gt;.dynamic: Holds all needed information for dynamic linking.&lt;/li&gt;
&lt;li&gt;.dynsym : symbol tables dedicated to dynamically linked symbols.&lt;/li&gt;
&lt;li&gt;.strtab : string table of .symtab section.&lt;/li&gt;
&lt;li&gt;.dynstr : string table of .dynsym section.&lt;/li&gt;
&lt;li&gt;.interp : RTLD embedded string.&lt;/li&gt;
&lt;li&gt;.rel.dyn: global variable relocation table.&lt;/li&gt;
&lt;li&gt;.rel.plt: function relocation table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command to get section headers&lt;/p&gt;
&lt;pre class="code literal-block"&gt;readelf -S elf_name
&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;Segments&lt;/h3&gt;
&lt;p&gt;Also called Programm Headers, segments split the binary into chunks, they
aren't useful at linktime.
There is a Program Header Table, an array of Elf64_Phdr (or Elf32_Phdr for
i386 ABI), there is an array entry for each segment.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="cm"&gt;/* Program segment header.  */&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;        &lt;span class="n"&gt;p_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="cm"&gt;/* Segment type             */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Off&lt;/span&gt;         &lt;span class="n"&gt;p_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="cm"&gt;/* Segment file offset      */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Addr&lt;/span&gt;        &lt;span class="n"&gt;p_vaddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment virtual address  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Addr&lt;/span&gt;        &lt;span class="n"&gt;p_paddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment physical address */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;        &lt;span class="n"&gt;p_filesz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="cm"&gt;/* Segment size in file     */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;        &lt;span class="n"&gt;p_memsz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment size in memory   */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;        &lt;span class="n"&gt;p_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment flags            */&lt;/span&gt;
  &lt;span class="n"&gt;Elf32_Word&lt;/span&gt;        &lt;span class="n"&gt;p_align&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment alignment        */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf32_Phdr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;        &lt;span class="n"&gt;p_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="cm"&gt;/* Segment type             */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Word&lt;/span&gt;        &lt;span class="n"&gt;p_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment flags            */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Off&lt;/span&gt;         &lt;span class="n"&gt;p_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="cm"&gt;/* Segment file offset      */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Addr&lt;/span&gt;        &lt;span class="n"&gt;p_vaddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment virtual address  */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Addr&lt;/span&gt;        &lt;span class="n"&gt;p_paddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment physical address */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;       &lt;span class="n"&gt;p_filesz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="cm"&gt;/* Segment size in file     */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;       &lt;span class="n"&gt;p_memsz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment size in memory   */&lt;/span&gt;
  &lt;span class="n"&gt;Elf64_Xword&lt;/span&gt;       &lt;span class="n"&gt;p_align&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* Segment alignment        */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Elf64_Phdr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;p_type&lt;/strong&gt; common values are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PT_NULL   : unassigned segment (first entry of Program Header Table)&lt;/li&gt;
&lt;li&gt;PT_LOAD   : Loadable segment&lt;/li&gt;
&lt;li&gt;PT_INTERP : Segment holding .interp section&lt;/li&gt;
&lt;li&gt;PT_TLS    : Thread Local Storage segment (Common in static binaries)&lt;/li&gt;
&lt;li&gt;PT_DYNAMIC: Holding .dynamic section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;important&lt;/strong&gt;: Only PT_LOAD segments will be loaded in memory, the others
are mapped in the memory range of one of the loaded segments.&lt;/p&gt;
&lt;p&gt;Command to get segment/program header:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;readelf -I elf_name
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;So sections contain information about linking and Program Headers split
binary into segments.&lt;/p&gt;
&lt;p&gt;Segments have offsets and virtual addresses that must be congruent modulo
the sytem page size, and p_align must be a multiple of the system page
size.&lt;/p&gt;
&lt;p&gt;With this alignment the segment mapping can't overlap in a single memory
page. A problem for the overlap are different access attributes, these 
cannot be forced if two segments are mapped in the same memory page.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References:
&lt;a href="https://www.intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/"&gt;intezer&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>#elf</category><category>#linux</category><category>#malware</category><category>#reverse</category><category>#security</category><guid>https://neetx.github.io/posts/ELF-headers-sections-and-segments/</guid><pubDate>Sat, 16 Jan 2021 15:29:26 GMT</pubDate></item></channel></rss>